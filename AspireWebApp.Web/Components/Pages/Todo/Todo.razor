@page "/todo"
@using AspireWebApp.Web.Helpers
@using Microsoft.AspNetCore.Components.Web
@inject IDialogService DialogService

@using global::Todo.Application.DTOs
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject TodoApiClient TodoApiClient
@inject NavigationManager Navigation

@rendermode InteractiveServer

@if (TodoListDtos == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4">
                <TodoListCreate Busy="Busy"
                                TodoListDto="newTodoList"
                                IsAdd="true"
                                CancelRequest="Cancel"
                                ValidationResult="@(async (success) => await HandleSubmitAsync(success))" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4">
                <MudTable T="TodoListDto" Items="@TodoListDtos" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<TodoListDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Periodic TodoListDtos</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Title</MudTh>
                        <MudTh>Count</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@GetRowNumber(context)</MudTd>
                        <MudTd DataLabel="Sign" style="width: 60%;">@context.Title</MudTd>
                        <MudTd DataLabel="Name">@context.Items.Count</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => Navigation.NavigateTo($"/todo/{context.Id}"))">
                                View
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => { _openDeletePopOver = true; ItemToDelete = context.Id;})">Delete</MudButton>
                            
                            <MudOverlay @bind-Visible="_openDeletePopOver" AutoClose="true" />
                            <MudPopover Open="@(_openDeletePopOver && context.Id == ItemToDelete)"
                                        AnchorOrigin="Origin.CenterRight"
                                        TransformOrigin="Origin.BottomRight"
                                        RelativeWidth="DropdownWidth.Ignore">

                                <div class="d-flex flex-column">
                                    <MudButtonGroup OverrideStyles="false">
                                        <MudButton OnClick="@(()=> { _openDeletePopOver = false; ItemToDelete = Guid.Empty;})" Color="Color.Default" StartIcon="@Icons.Material.Outlined.Cancel">Cancel</MudButton>
                                        <MudButton OnClick="@(()=> { _openDeletePopOver = false; ;})" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete">Delete</MudButton>
                                    </MudButtonGroup>
                                </div>
                            </MudPopover>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>

    </MudGrid>
}

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private TodoListDto selectedItem1 = null;
    private HashSet<TodoListDto> selectedItems = new HashSet<TodoListDto>();

    // Delete logic
    private Guid ItemToDelete { get; set; }
    public bool _openDeletePopOver;

    private IEnumerable<TodoListDto> TodoListDtos = new List<TodoListDto>();

    protected override async Task OnInitializedAsync()
    {
        TodoListDtos = await TodoApiClient.GetTodoListsAsync();
    }

    private bool FilterFunc1(TodoListDto TodoListDto) => FilterFunc(TodoListDto, searchString1);

    private bool FilterFunc(TodoListDto TodoListDto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (TodoListDto.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private TodoListDto? newTodoList { get; set; } = new();
    private bool Busy;
    public int? GetRowNumber(object element) =>
        TodoListDtos?.TakeWhile(x => x != element).Count();

    private async Task HandleSubmitAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            // still need to edit model
            // Error = false;
            // ConcurrencyError = false;
            return;
        }

        Busy = true;

        try
        {
            await TodoApiClient.CreateTodoListAsync(newTodoList);
        }
        // catch (ApiException ex) when (ex.StatusCode == 409)
        // {
        //     ConcurrencyError = true;
        //     DbTodoItem = ex.GetContentAs<TodoItem>();
        // }
        // catch (ApiException ex)
        // {
        //     Error = true;
        //     ErrorMessage = ex.GetContentAs<string>();
        // }
        finally
        {
            Busy = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        newTodoList = null;
    }

}
