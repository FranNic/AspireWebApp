@page "/todo"
@using AspireWebApp.Web.Helpers
@using global::Todo.Application.DTOs
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject TodoApiClient TodoApiClient
@inject NavigationManager Navigation

@rendermode InteractiveServer


<h3>Todo</h3>

@if (todoLists == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Items</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todoList in todoLists)
            {
                <tr>
                    <td>@todoList.Title</td>
                    <td>@todoList.Items.Count</td>
                    <td><a class="btn btn-primary" href="@ItemHelper.TodoListUrl(todoList)">View</a></td>
                    <td><a class="btn btn-primary" href="@ItemHelper.TodoListUrl(todoList)">Delete</a></td>
                </tr>
            }
        </tbody>
    </table>
    <TodoListCreate Busy="Busy"
                    TodoListDto="newTodoList"
                    IsAdd="true"
                    CancelRequest="Cancel"
                    ValidationResult="@(async (success) => await HandleSubmitAsync(success))" />
}

@code {

    private TodoListDto[]? todoLists;
    private TodoListDto? newTodoList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var enumerable = await TodoApiClient.GetTodoListsAsync();

            todoLists = enumerable.ToArray();
            newTodoList = new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task HandleSubmitAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            // still need to edit model
            // Error = false;
            // ConcurrencyError = false;
            return;
        }

        Busy = true;

        try
        {
            await TodoApiClient.CreateTodoListAsync(newTodoList);

        }
        // catch (ApiException ex) when (ex.StatusCode == 409)
        // {
        //     ConcurrencyError = true;
        //     DbTodoItem = ex.GetContentAs<TodoItem>();
        // }
        // catch (ApiException ex)
        // {
        //     Error = true;
        //     ErrorMessage = ex.GetContentAs<string>();
        // }
        finally
        {
            Busy = false;
        }
    }
    private void Cancel()
    {
        Busy = true;
        Navigation.NavigateTo($"/");
    }

    private bool Busy;
}
