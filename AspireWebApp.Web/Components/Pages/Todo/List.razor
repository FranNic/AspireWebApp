@page "/todo/{TodoListId:guid}"

@rendermode InteractiveServer

@inject TodoApiClient TodoApiClient


@if (todoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">

        <h3>@todoList.Title</h3>

        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <h5>Create Todo Item</h5>
                <MudCard>
                    <MudCardContent>
                        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Model="TodoItemToAdd">
                            <MudTextField T="string" Label="Title" Required="true" RequiredError="Title is required!" @bind-Value="TodoItemToAdd.Title" />
                            <MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!" @bind-Value="TodoItemToAdd.Description" />
                            <MudDatePicker Label="Due date" @bind-Date="_date" DateFormat="dd/MM/yyyy" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(()=>AddTask())">Add</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="8">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudStack>
                        @foreach (var item in EditableTodoItems)
                        {
                            <MudPaper Class="pa-3">
                                <MudToggleIconButton Toggled="item.IsDone"
                                                     ToggledChanged="async result => SwitchIsDone(item)"
                                                     Icon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                                                     Color="@Color.Primary"
                                                     ToggledIcon="@Icons.Material.Filled.CheckBox"
                                                     ToggledColor="@Color.Success"
                                                     title="@(item.IsDone ? "Done" : "NotDone")" />

                                <span style="@(item.IsDone ? "text-decoration: line-through;" : "")">@item.Title</span>
                                <span style="@(item.IsDone ? "text-decoration: line-through; color:#979797" : "color:#979797")">@item.Description</span>

                                <MudToggleIconButton Toggled="(ShowDeleteConfirmation && ItemToDelete == item.Id)"
                                                     ToggledChanged="async result => await SwitchDeleteConfirmation(item.Id)"
                                                     Icon="@Icons.Material.Filled.Delete"
                                                     Color="@Color.Secondary"
                                                     ToggledIcon="@Icons.Material.Filled.Cancel"
                                                     ToggledColor="@Color.Default"
                                                     title="@(item.IsDone ? "Done" : "NotDone")" />
                                <MudIconButton Class="@(ShowDeleteConfirmation && ItemToDelete == item.Id ? "": "invisible")" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" OnClick="@(async result => await ConfirmDeleteAsync(item.Id))" />
                            </MudPaper>
                        }
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    // MudBlazor form.
    bool success;
    string[] errors = { };
    MudForm form;
    private DateTime? _date = DateTime.Today; // Date needs to be initialized or used outside the object.

    private TodoListDto? todoList;
    private string? taskName;

    [SupplyParameterFromForm]
    private TodoItemDto TodoItemToAdd { get; set; } = new TodoItemDto();

    [SupplyParameterFromForm]
    private TodoItemDto[] EditableTodoItems { get; set; }

    [Parameter]
    public Guid TodoListId { get; set; }

    // Tracking of asynchronous calls.
    private bool Loading;
    // Set to true when delete is requested.
    private bool ShowDeleteConfirmation = false;
    private Guid ItemToDelete { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        Loading = true;
        todoList = await TodoApiClient.GetTodoListAsync(TodoListId);
        EditableTodoItems = todoList.Items.ToArray();
        Loading = false;
    }

    private async Task AddTask()
    {
        await this.form.Validate();
        if (!this.form.IsValid)
        {
            return;
        }

        TodoItemToAdd.DueDate = _date;

        // call the api
        TodoItemDto createdTodoItem = await TodoApiClient.CreateTodoItemAsync(todoList.Id, TodoItemToAdd);

        // Clear the task name
        taskName = null;

        // refresh the UI by adding it to the list
        if (createdTodoItem != null)
            EditableTodoItems = EditableTodoItems.Append(createdTodoItem).ToArray();
    }

    private async Task SwitchIsDone(TodoItemDto todoItemDtoToUpdate)
    {
        if (todoItemDtoToUpdate == null)
        {
            return;
        }

        todoItemDtoToUpdate.IsDone = !todoItemDtoToUpdate.IsDone;

        // get the checkbox state
        TodoItemDto? todoitemUpdated = await TodoApiClient.UpdateTodoItemAsync(TodoListId, todoItemDtoToUpdate);

        // refresh the UI
        if (todoitemUpdated != null)
        {
            //find in collection and update
            var index = EditableTodoItems.ToList().FindIndex(x => x.Id == todoitemUpdated.Id);
            EditableTodoItems[index] = todoitemUpdated;
        }
    }

    private async Task SwitchDeleteConfirmation(Guid id)
    {
        if (ShowDeleteConfirmation && ItemToDelete != id)
        {
            ShowDeleteConfirmation = true;
            ItemToDelete = id;
            return;
        }
        ShowDeleteConfirmation = !ShowDeleteConfirmation;
        ItemToDelete = ShowDeleteConfirmation ? id : Guid.Empty;
    }

    // Delegate to update the todo item

    // private async Task UpdateTodoItem(ChangeEventArgs e, TodoItemDto todoItemDto)
    // {
    //     // call the api
    //     await TodoApiClient.UpdateTodoItemAsync(todoList.Id, todoItemDto);

    //     // refresh the UI by modifing the collection
    // }


    // Confirm deletion.
    // result is True when user confirmed.
    private async Task ConfirmDeleteAsync(Guid id)
    {
        if (Loading && ItemToDelete != id)
        {
            // Avoid concurrent requests.
            return;
        }

        // call the api
        bool response = await TodoApiClient.DeleteTodoItemAsync(TodoListId, id);

        if (response)
        {
            // refresh UI by removing item from the list
            EditableTodoItems = EditableTodoItems.Where(x => x.Id != id).ToArray();
            _ = SwitchDeleteConfirmation(id);
        }
        else
        {
            ShowDeleteConfirmation = false;
        }
    }
}
