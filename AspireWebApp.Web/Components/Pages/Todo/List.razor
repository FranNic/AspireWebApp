@page "/todo/{TodoListId:guid}"

@rendermode InteractiveServer

@using AspireWebApp.Web.Helpers
@using global::Todo.Application.DTOs


@inject NavigationManager Navigation
@inject TodoApiClient TodoApiClient


@if (todoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>@todoList.Title</h3>

    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <h5>Create Todo Item</h5>
            <MudCard>
                <MudCardContent>
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Model="TodoItemToAdd">
                        <MudTextField T="string" Label="Title" Required="true" RequiredError="Title is required!" @bind-Value="TodoItemToAdd.Title" />
                        <MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!" @bind-Value="TodoItemToAdd.Description" />
                        <MudDatePicker Label="Due date" @bind-Date="_date" DateFormat="dd/MM/yyyy" />
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(()=>AddTask())">Add</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="8">
            <MudPaper Class="pa-4 mud-height-full">
                <MudStack>
                    @foreach (var item in EditableTodoItems)
                    {
                        <MudPaper Class="pa-3">
                            <MudToggleIconButton Toggled="item.IsDone"
                                                 ToggledChanged="async result => SwitchIsDone(item)"
                                                 Icon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                                                 Color="@Color.Primary"
                                                 ToggledIcon="@Icons.Material.Filled.CheckBox"
                                                 ToggledColor="@Color.Success"
                                                 title="@(item.IsDone ? "Done" : "NotDone")"                      
                                                 />
                            <span style="@(item.IsDone ? "text-decoration: line-through;" : "")">@item.Title</span>
                            <span style="@(item.IsDone ? "text-decoration: line-through; color:#FAFAFA" : "color:#FAFAFA")">@item.Description</span>
                        </MudPaper>
                    }

                    @*   <li class="list-group-item d-flex d-flex align-items-center border-start-0 border-top-0 border-end-0 border-bottom rounded-0 mb-2">
                <div class="d-flex align-items-center">
                <input class="form-check-input me-2" type="checkbox" checked="@item.IsDone" @oninput="@(() => SwitchIsDone(item))" />
                <span style="@(item.IsDone ? "text-decoration: line-through;":"")">@item!.Title </span>
                </div>
                <div class="col col-xl-3">
                <a class="btn btn-default" href="@ItemHelper.TodoItemUrl(todoList, item)">Edit</a>
                <button class="btn btn-danger" @onclick="@(() => { ShowDeleteConfirmation = true; ItemToDelete = item.Id;})">Delete</button>
                </div>

                </li>
                *@
                    @* if (ShowDeleteConfirmation && item.Id.Equals(ItemToDelete))
                {
                <DeletePrompt Confirmation="@(async result => await ConfirmDeleteAsync(result, item.Id))" />
                } *@
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    // MudBlazor form.
    bool success;
    string[] errors = { };
    MudForm form;
    private DateTime? _date = DateTime.Today; // Date needs to be initialized or used outside the object.

    private TodoListDto? todoList;
    private string? taskName;

    [SupplyParameterFromForm]
    private TodoItemDto TodoItemToAdd { get; set; } = new TodoItemDto();

    [SupplyParameterFromForm]
    private TodoItemDto[] EditableTodoItems { get; set; }

    [Parameter]
    public Guid TodoListId { get; set; }

    // Tracking of asynchronous calls.
    private bool Loading;
    // Set to true when delete is requested.
    private bool ShowDeleteConfirmation = false;
    private Guid ItemToDelete { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        Loading = true;
        todoList = await TodoApiClient.GetTodoListAsync(TodoListId);
        EditableTodoItems = todoList.Items.ToArray();
        Loading = false;
    }

    private async Task AddTask()
    {
        await this.form.Validate();
        if (!this.form.IsValid)
        {
            return;
        }

        TodoItemToAdd.DueDate = _date;

        // call the api
        await TodoApiClient.CreateTodoItemAsync(todoList.Id, TodoItemToAdd);

        // Clear the task name
        taskName = null;

        // refresh the UI
        Navigation.Refresh(true);
    }

    private async Task SwitchIsDone(TodoItemDto todoItemDtoToUpdate)
    {
        if (todoItemDtoToUpdate == null)
        {
            return;
        }

        todoItemDtoToUpdate.IsDone = !todoItemDtoToUpdate.IsDone;

        // get the checkbox state
        TodoItemDto? todoitemUpdated = await TodoApiClient.UpdateTodoItemAsync(TodoListId, todoItemDtoToUpdate);

        // refresh the UI
        if(todoitemUpdated != null)
        {
            //find in collection and update
            var index = EditableTodoItems.ToList().FindIndex(x => x.Id == todoitemUpdated.Id);
            EditableTodoItems[index] = todoitemUpdated;
        }
    }

    private async Task UpdateTodoItem(ChangeEventArgs e, TodoItemDto todoItemDto)
    {
        // call the api
        await TodoApiClient.UpdateTodoItemAsync(todoList.Id, todoItemDto);

        // refresh the UI on servermode
        Navigation.Refresh(true);
    }

    // Confirm deletion.
    // result is True when user confirmed.
    private async Task ConfirmDeleteAsync(bool result, Guid id)
    {
        if (result)
        {
            await DeleteAsync(id);
        }
        else
        {
            ShowDeleteConfirmation = false;
        }
    }

    private async Task DeleteAsync(Guid id)
    {
        if (Loading)
        {
            // Avoid concurrent requests.
            return;
        }

        // call the api
        bool response = await TodoApiClient.DeleteTodoItemAsync(TodoListId, id);

        if (response)
        {
            // refresh the UI on servermode
            Navigation.Refresh(true);
        }
    }

}
