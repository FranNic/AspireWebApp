@if (TodoListDto is not null)
{

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Model="TodoListDto">

        <MudTextField T="string" Label="Title" Required="true" RequiredError="Title is required!" @bind-Value="TodoListDto.Title"/>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(()=>HandleSubmitAsync(form.IsValid))">Add</MudButton>

    </MudForm>
}

@code {
    // // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; } = true;

    // The TodoListDto to upsert.
    [Parameter]
    public TodoListDto? TodoListDto { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid); // this invokes the function in the parent component
    }

    // MudBlazor form.
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

}
