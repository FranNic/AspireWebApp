<h3>Todo item form</h3>

﻿@using Microsoft.AspNetCore.Components.Forms;
@using global::Todo.Application.DTOs


@if (TodoItemDto is not null)
{
    <EditForm Model="TodoItemDto"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
            
        <h2>Title</h2>
        <p>
            <label>
                First Name:
                <InputText @bind-Value="TodoItemDto.Title" />
            </label>
        </p>
      
        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning"
                @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit"
                class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The TodoItemDto to upsert.
    [Parameter]
    public TodoItemDto? TodoItemDto { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid); // this invokes the function in the parent component
    }
}
